#!/usr/bin/env python3

from scrapor.collection import PersistentCollection
from scrapor.html import text

from tempfile import mkdtemp
from shutil import rmtree
from textwrap import wrap, indent
from random import randint

import sys
import os


ENTRY_POINT = "http://example.org"
STORE_NAME = "store.txt"
INDENT = " " * 4
TMP_DIR = mkdtemp()


def main(args):
    store_path = os.path.join(TMP_DIR, STORE_NAME)
    c = SampleCollection(ENTRY_POINT, store_path, threshold=3)
    for item in c.items():
        html = render_item(item)
        print(indent(html, INDENT * 2))

    return True


class SampleCollection(PersistentCollection):
    item_selector = "h1, p:first-of-type"
    _mirror = "https://example.com"

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.page_count = 0

    def item(self, node, page):
        uri = "%s/%s" % (page.url, randint(1, 99))
        return {
            "uri": uri,
            "title": text(node),
            "new": self.register(uri)
        }

    def next_page(self, page):
        self.page_count += 1
        return self._mirror if self.page_count < 2 else None


def render_item(item):
    lines = wrap(item["title"], 60)
    return """
<article%(cls)s>
    <a href="%(uri)s">%(caption)s</a>
</article>
    """.strip() % {
        "cls": ' class="is-new"' if item["new"] else "",
        "uri": item["uri"],
        "caption": lines[0] if len(lines) == 1 else "\n%s\n%s" % (
                indent("\n".join(lines), INDENT * 2), INDENT)
    }


if __name__ == "__main__":
    status = not main(sys.argv)
    rmtree(TMP_DIR)
    sys.exit(status)
